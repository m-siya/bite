Bite {
  program 		= 	declaration*
  declaration 	= 	funcDeclaration | varDeclaration | statement

  funcDeclaration = "recipe" space function block
  function = id "(" parameters? ")"
  parameters = id ("," id)*
  
  varDeclaration = "ingredient" space id space ( "=" space expression )?
  
  statement = ifStatement | 
              printStatement | 
              returnStatement | 
              whileStatement | 
              breakStatement|
              continueStatement |
              assignment |
              block
  
  //exprStatement = expression
  
  whileStatement = "whiskTill" space expression space block 
  forStatement = "fry" space expression space block
  ifStatement = "taste" space expression space block
  							("add" block )?
  printStatement = "plate" space expression
  returnStatement = "serve" space expression
  breakStatement = "stopCooking"
  continueStatement = "keepCooking"

assignment = id "=" expression
  
expression =  logical | relational | arithmetic
  
logical = and
and =and "&&" or -- logicalAnd
		| or
or = or "||" not -- logicalOr
  		| not 
not = "!" parenthesis -- not
        | relational
        | arithmetic
        | parenthesis
  
relational = isEqual
isEqual = isEqual "==" notEqual -- equal
		| notEqual 
notEqual = notEqual "!=" gt -- notEqual
		| gt
gt = gt ">" lt -- greaterThan
		| lt
lt = lt "<" ge -- lessThan
		| ge
ge = ge ">=" le -- greaterEqual
		| le
le = le "<=" parenthesis -- lessEqual
		| arithmetic
		| parenthesis
  
arithmetic 
	= sum
sum 
	= sum "+" product -- add
  		| sum "-" product -- minus
  		| product
product 
	= product "*" parenthesis -- multiply
  		| product "/" parenthesis -- divide
  		| parenthesis

parenthesis
	= "(" expression ")" -- paren
  		| "-" parenthesis -- neg
    	| id 
      | number
      | bool
    
  block = "{" declaration* "}"
  number = float | int
  id = letter idchar*
  idchar = "_" | alnum

  bool = "t" | "f"
  boolnull = bool | "bland"

  int = digit+
  float = digit* "." digit+
  
}